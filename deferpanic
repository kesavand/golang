package main

import (
	"fmt"
	"time"
)

type request struct {
	requestName string
}

type response struct {
	responseName string
}

func main() {
	if err := test(); err != nil {
		fmt.Printf("Main Error: %v\n", err)
	}
	
	time.Sleep(100 * time.Millisecond)
}

func testGo() {

	fmt.Println("Inside Go routine")
}

func mimicError(key string) error {
	return fmt.Errorf("Mimic Error : %s", key)
}

func testPanic() {
	fmt.Println("Start Panic Defer")

	if r := recover(); r != nil {
		fmt.Println("Defer Panic :", r)
	}

}

func testDefer(req *request, resp *response, err error) {

	go testGo()
	fmt.Println("Start Defer")

	if err != nil {
		fmt.Println("Defer Error:", err, req.requestName, resp.responseName)
	}

}

func test() (err error) {

	req := new(request)
	resp := new(response)

	//req.requestName = "http_request"

	resp = &response{
		responseName: "httpResponse",
	}

	fmt.Println("Basic defer and panic test")

	err = mimicError("1")

	defer testPanic()
	defer testDefer(req, resp, err)

	fmt.Println("Start Test")

	panic("Mimic Panic")
	
	
	
}
