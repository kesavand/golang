Go Interview Questions 
======================

Explain what is string literals?

A string literals represents a string constant obtained from concatenating a sequence of characters.

There are two forms,

Raw string literals: The value of raw string literals are character sequence between back quotes ‘‘.  The value of a string literal is the string composed of the uninterrupted character between quotes.
Interpreted string literals: It is represented between double quotes ““. The text between the double quotes which may not contain newlines, forms the value of the literal.


Explain packages in Go program?

Every GO program is made up of packages.  The program starts running in package main.  This program is using the packages with import paths “fmt” and “math/rand”.


Explain workspace in GO?

Inside a workspace GO code must be kept.  A workspace is a directory hierarchy with three directories at its root.

src contains GO source files organized into packages
pkg contains package objects and
bin contains executable commands

Explain how to use custom packages in GO language?

If you are making your library a separate go get –table project and if your library is for internal use then you can code like this

Under the directory of your project place the directory with library files
Refer to the library using its path relative to the root of your workspace consisting the project


Explain what is GOPATH environment variable?

The GOPATH environment variable determines the location of the workspace. It is the only environment variable that you have to set when developing Go code.



Explain how you can do testing in GO?

It has a lightweight testing framework consists of the go test command and the testing package.

To write a test you have to create a file with a name ending in _testing. Go which contains functions named TestXXX with signature func (t *testing.T).  The test framework runs each such function.


Explain what is string types?

A string type represents the set of string values, and string values are sequence of bytes.  Strings once created is not possible to change.


What are the advantages of GO?

GO compiles very quickly
Go supports concurrency at the language level
Functions are first class objects in GO
GO has garbage collection
Strings and Maps are built into the language


List out the built in support in GO?

The available built-in-support in GO includes

Container: container/list , container/heap
Web Server: net/http
Cryptography: Crypto/md5 , crypto/sha1
Compression: compress/ gzip
Database: database/sql


 Explain what is go routine in GO? How you can stop go routine?

A goroutine is a function which is capable of running concurrently with other functions

To stop goroutine, you pass the goroutine  a signal channel, that signal channel is used to push a value into when you want the goroutine to stop.  The goroutine polls that channel regularly as soon as it detects a signal, it quits.

Quit : = make (chan bool)

go func ( ) {

for  {

select {

case <- quit:

return

default

// do other stuff

}

}

}()

// Do stuff

// Quit goroutine

Quit <- true



Explain how you can write multiline strings in GO?

To write multiline string in GO you can use a raw string literal, where the string is delimited by back quotes rather than double quotes.

‘ line  1

line  2

line  3 ’



 Explain how you to access command line arguments passed to a GO program?

You can access the command line argument using the os.Args variables. For example,

Package main

import (

“fmt”

“OS”

)

func main () {

fmt.Println(len(os.Args), os.Args)

}


Explain how pointer is represented in GO?

In GO a pointer is represented by using the * (asterisk) character followed by the type of the stored value.


Explain how arrays in GO works differently then C ?

In GO Array works differently than it works in C

Arrays are values, assigning one array to another copies all the elements
If you pass an array to a function, it will receive a copy of the array, not a pointer to it
The size of an array is part of its type. The types [10] int and [20] int are distinct



xplain GO Interfaces ?

In GO, interfaces is a way to specify the behaviour of an object.  An interface is created by using the “type” word, followed by a name and the keyword interface.  An interface is specified as two things.

A set of methods
Also it is referred as type



Explain what Type assertion is used for and how it does it?

Type conversion is used to convert dissimilar types in GO.  A type  assertion takes an interface value and retrieve from it a value of the specified explicit type.



In GO language how you can check variable type at runtime?

A special type of switch is dedicated in GO to check variable type at runtime, this switch is referred as type switch.  Also, you can switch on the type of an interface value with Type Switch.



Does Go support type inheritance?
No support for type inheritance.

Does Go support operator overloading?
No support for operator overloading.

Does Go support method overloading?
No support for method overloading.

Does Go support pointer arithmetics?
No support for pointer arithmetic.

Does Go support generic programming?
No support for generic programming.

Is Go a case sensitive language?
Yes! Go is a case sensitive programming language.

What is static type declaration of a variable in Go?
Static type variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable declaration at the time of linking of the program.

What is dynamic type declaration of a variable in Go?
A dynamic type variable declaration requires compiler to interpret the type of variable based on value passed to it. Compiler don't need a variable to have type statically as a necessary requirement.

Can you declared multiple types of variables in single declaration in Go?
Yes Variables of different types can be declared in one go using type inference.

var a, b, c = 3, 4, "foo"  
How to print type of a variable in Go?
Following code prints the type of a variable −

var a, b, c = 3, 4, "foo"  
fmt.Printf("a is of type %T\n", a)
What is a pointer?
It's a pointer variable which can hold the address of a variable.

For example −

var x = 5
var p *int
p = &x
fmt.Printf("x = %d", *p)
Here x can be accessed by *p.

What is the purpose of break statement?
break terminates the for loop or switch statement and transfers execution to the statement immediately following the for loop or switch.

What is the purpose of continue statement?
continue causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.

What is the purpose of goto statement?
goto transfers control to the labeled statement.

Explain the syntax for 'for' loop.
The syntax of a for loop in Go programming language is −

for [condition |  ( init; condition; increment ) | Range] {
   statement(s);
}



What do you mean by function as value in Go?
Go programming language provides flexibility to create functions on the fly and use them as values. We can set a variable with a function definition and use it as parameter to a function.

What are the function closures?
Functions closure are anonymous functions and can be used in dynamic programming.

What are methods in Go?
Go programming language supports special types of functions called methods. In method declaration syntax, a "receiver" is present to represent the container of the function. This receiver can be used to call function using "." operator.

What is default value of a local variable in Go?
A local variable has default value as it corresponding 0 value.

What is default value of a global variable in Go?
A global variable has default value as it corresponding 0 value.

What is default value of a pointer variable in Go?
Pointer is initialized to nil.

Explain the purpose of the function Printf().
Prints the formatted output.

What is lvalue and rvalue?
The expression appearing on right side of the assignment operator is called as rvalue. Rvalue is assigned to lvalue, which appears on left side of the assignment operator. The lvalue should designate to a variable not a constant.

What is the difference between actual and formal parameters?
The parameters sent to the function at calling end are called as actual parameters while at the receiving of the function definition called as formal parameters.

What is the difference between variable declaration and variable definition?
Declaration associates type to the variable whereas definition gives the value to the variable.

Explain modular programming.
Dividing the program in to sub programs (modules/function) to achieve the given task is modular approach. More generic functions definition gives the ability to re-use the functions, such as built-in library functions.


What is a token?
A Go program consists of various tokens and a token is either a keyword, an identifier, a constant, a string literal, or a symbol.

Which key word is used to perform unconditional branching?
goto

What is an array?
Array is collection of similar data items under a common name.

What is a nil Pointers in Go?
Go compiler assign a Nil value to a pointer variable in case you do not have exact address to be assigned. This is done at the time of variable declaration. A pointer that is assigned nil is called a nil pointer. The nil pointer is a constant with a value of zero defined in several standard libraries.

What is a pointer on pointer?
It's a pointer variable which can hold the address of another pointer variable. It de-refers twice to point to the data held by the designated pointer variable.

var a int
var ptr *int
var pptr **int
a = 3000
ptr = &a
pptr = &ptr
fmt.Printf("Value available at **pptr = %d\n", **pptr)
Therefore 'a' can be accessed by **pptr.

What is structure in Go?
How to define a structure in Go?
To define a structure, you must use type and struct statements. The struct statement defines a new data type, with more than one member for your program. type statement binds a name with the type which is struct in our case.

The format of the struct statement is this −

type struct_variable_type struct {
   member definition;
   member definition;
   ...
   member definition;
}
What is slice in Go?
Go Slice is an abstraction over Go Array. As Go Array allows you to define type of variables that can hold several data items of the same kind but it do not provide any inbuilt method to increase size of it dynamically or get a sub-array of its own. Slices covers this limitation. It provides many utility functions required on Array and is widely used in Go programming.

How to define a slice in Go?
To define a slice, you can declare it as an array without specifying size or use make function to create the one.

var numbers []int /* a slice of unspecified size */
/* numbers == []int{0,0,0,0,0}*/
numbers = make([]int,5,5) /* a slice of length 5 and capacity 5*/
How to get the count of elements present in a slice?
len() function returns the elements presents in the slice.

What is the difference between len() and cap() functions of slice in Go?
len() function returns the elements presents in the slice where cap() function returns the capacity of slice as how many elements it can be accomodate.

How to get a sub-slice of a slice?
Slice allows lower-bound and upper bound to be specified to get the subslice of it using[lower-bound:upper-bound].

What is range in Go?
The range keyword is used in for loop to iterate over items of an array, slice, channel or map. With array and slices, it returns the index of the item as integer. With maps, it returns the key of the next key-value pair.

What are maps in Go?
Go provides another important data type map which maps unique keys to values. A key is an object that you use to retrieve a value at a later date. Given a key and a value, you can store the value in a Map object. After value is stored, you can retrieve it by using its key.

How to create a map in Go?
You must use make function to create a map.

/* declare a variable, by default map will be nil*/
var map_variable map[key_data_type]value_data_type

/* define the map as nil map can not be assigned any value*/
map_variable = make(map[key_data_type]value_data_type)
How to delete an entry from a map in Go?
delete() function is used to delete an entry from the map. It requires map and corresponding key which is to be deleted.

What is type casting in Go?
Type casting is a way to convert a variable from one data type to another data type. For example, if you want to store a long value into a simple integer then you can type cast long to int. You can convert values from one type to another using the cast operator as following −

type_name(expression)
What are interfaces in Go?
Go programming provides another data type called interfaces which represents a set of method signatures. struct data type implements these interfaces to have method definitions for the method signature of the interfaces.



Why would you prefer to use an empty struct{}? Provide some examples of the good use of the empty struct{}.


You would use an empty struct when you would want to save some memory. Empty structs do not take any memory for its value.

a := struct{}{}
println(unsafe.Sizeof(a))
// Output: 0
This saving is usually insignificant and is dependent on the size of the slice or a map. Although, more important use of an empty struct is to show a reader you do not need a value at all. Its purpose in most cases is mainly informational. Here are a few examples where it can be useful:

When implementing a data set:
set := make(map[string]struct{})
for _, value := range []string{"apple", "orange", "apple"} {
   set[value] = struct{}{}
}
fmt.Println(set)
// Output: map[orange:{} apple:{}]
With the seen hash, like when traversing a graph:
seen := make(map[string]struct{})
for _, ok := seen[v]; ok {
    // First time visiting a vertex.
    seen[v] = struct{}{}
}
When building an object, and only being interested in a grouping of methods and no intermediary data, or when you do not plan to retain the object state. In the example below it does not make a difference whether the method is called on the same (case #1) or on two different objects (case #2):
type Lamp struct{}

func (l Lamp) On() {
        println("On")

}
func (l Lamp) Off() {
        println("Off")
}

func main() {
       	// Case #1.
       	var lamp Lamp
       	lamp.On()
       	lamp.Off()
       	// Output:
       	// on
       	// off
	
       	// Case #2.
       	Lamp{}.On()
       	Lamp{}.Off()
       	// Output: 
       	// on
       	// off
}
When you need a channel to signal an event, but do not really need to send any data. This event is also not the last one in the sequence, in which case you would use the close(ch) built-in function.
func worker(ch chan struct{}) {
	// Receive a message from the main program.
	<-ch
	println("roger")
	
	// Send a message to the main program.
	close(ch)
}

func main() {
	ch := make(chan struct{})
	go worker(ch)
	
	// Send a message to a worker.
	ch <- struct{}{}
	
	// Receive a message from the worker.
	<-ch
	println(“roger")
	// Output:
	// roger
	// roger
}


How do you swap two values? Provide a few examples ?

You copy a slice by using the built-in copy() function:

a := []int{1, 2}
b := []int{3, 4}
check := a
copy(a, b)
fmt.Println(a, b, check)
// Output: [3 4] [3 4] [3 4]
Here, the check variable is used to hold a reference to the original slice description to make sure it is really copied.

In the next example, on the other hand, operation does not copy the slice contents, only the slice description:

a := []int{1, 2}
b := []int{3, 4}
check := a
a = b
fmt.Println(a, b, check)
// Output: [3 4] [3 4] [1 2]
You copy a map by traversing its keys. Yes, unfortunately, this is the simplest way to copy a map in Go:

a := map[string]bool{"A": true, "B": true}
b := make(map[string]bool)
for key, value := range a {
	b[key] = value
}
Following example copies just the description of the map:

a := map[string]bool{"A": true, "B": true}
b := map[string]bool{"C": true, "D": true}
check := a
a = b
fmt.Println(a, b, check)
// Output: map[C:true D:true] map[C:true D:true] map[A:true B:true]
There’s no built-in way in Go to copy an interface. No, the reflect.DeepCopy() function does not exist.



How do you compare two structs? What about two interfaces? Provide examples ?

You can compare two structs with the == operator, as you would do with other simple types. Just make sure they do not contain any slices, maps, or functions, in which case the code will not be compiled.

type Foo struct {
	A int
	B string
	C interface{}
}
a := Foo{A: 1, B: "one", C: "two"}
b := Foo{A: 1, B: "one", C: "two"}

println(a == b)
// Output: true

type Bar struct {
	A []int
}
a := Bar{A: []int{1}}
b := Bar{A: []int{1}}

println(a == b)
// Output: invalid operation: a == b (struct containing []int cannot be compared)
You can compare two interfaces with the == operator as long as the underlying types are “simple” and identical. Otherwise the code will panic at runtime:

var a interface{}
var b interface{}

a = 10
b = 10
println(a == b)
// Output: true

a = []int{1}
b = []int{2}
println(a == b)
// Output: panic: runtime error: comparing uncomparable type []int
Both structs and interfaces which contain maps, slices (but not functions) can be compared with the reflect.DeepEqual() function:

var a interface{}
var b interface{}

a = []int{1}
b = []int{1}
println(reflect.DeepEqual(a, b))
// Output: true

a = map[string]string{"A": "B"}
b = map[string]string{"A": "B"}
println(reflect.DeepEqual(a, b))
// Output: true

temp := func() {}
a = temp
b = temp
println(reflect.DeepEqual(a, b))
// Output: false
For comparing byte slices, there are nice helper functions in the bytes package: bytes.Equal(), bytes.Compare(), and bytes.EqualFold(). The latter is for comparing text strings disregarding the case, which are much faster than the reflect.DeepEqual().




How would you implement a stack and a queue in Go? Explain and provide code examples?

Hide answer
answer badge
You use slices to implement a stack or queue by yourself:

type Stack []int
func (s Stack) Empty() bool { return len(s) == 0 }
func (s *Stack) Push(v int) { (*s) = append((*s), v) }
func (s *Stack) Pop() int {
	v := (*s)[len(*s)-1]
	(*s) = (*s)[:len(*s)-1]
	return v
}

type Queue []int
func (q Queue) Empty() bool    { return len(q) == 0 }
func (q *Queue) Enqueue(v int) { (*q) = append((*q), v) }
func (q *Queue) Dequeue() int {
	v := (*q)[0]
	(*q) = (*q)[1:len(*q)]
	return v
}

func main() {
	s := Stack{}
	s.Push(1)
	s.Push(2)
	fmt.Println(s.Pop())
	fmt.Println(s.Pop())
	fmt.Println(s.Empty())
	// Output:
	// 2
	// 1
	// true

	q := Queue{}
	q.Enqueue(1)
	q.Enqueue(2)
	fmt.Println(q.Dequeue())
	fmt.Println(q.Dequeue())
	fmt.Println(q.Empty())
	// Output:
	// 1
	// 2
	// true
}
The queue implementation above is correct, but it is suboptimal. 



What is the difference, if any, in the following two slice declarations, and which one is more preferable?

var a []int
and

a := []int{}

The first declaration does not allocate memory if the slice is not used, so this declaration method is preferred.



Do you need both GOPATH and GOROOT variables, and why?

Hide answer
answer badge
Most of the time, you do not need them both. You need only the GOPATH variable set pointing to the Go packages tree or trees.

GOROOT points to the root of the Go language home directory, but it is most probably already set to the directory of the current Go language installation. It is easy to check whether it is so with the go env command:
$ go env
…
GOROOT=“/home/zabb/go”
…
It is necessary to set the GOROOT variable if there are multiple Go language versions on the same system or if the Go language has been downloaded as a binary package taken from the internet or transferred from another system.


Q#1. Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”. 


Q# 2.How many Looping constructs are present in Go programming language?

A# 2. Only one loop - for.

Q# 3. What is the default value of type bool in Go?

A# 3. false.

Q# 4. In case of Constants which type of expressions are evaluated at compile time and which are evaluated at run time?

A# 4. As a rule Constants are evaluated (determined) at compile time and never at run time. 

Q# 5. Which one of the following is correct?

         a. const Pi = 3.14
         b. const Pi = math.Pi 
         c. both a and b are correct
         d. None of the above

A# 5. c


Q# 6. Short  variable declaration := can be used only inside a function. True or False?

A# 6. True.

Q# 7. Short declaration := can be used for defining global variables. True or False?

A# 7. False.
